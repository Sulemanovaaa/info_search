








OpenNews: Новая криптографическая библиотека EverCrypt с математическим доказательством надёжности

var topnews=[
{l:-2,n:50473,t:'В рамках проекта HermiTux развивается unikernel, бинарно совместимый с Linux'},
{l:-1,n:50472,t:'Выпуск проекта DXVK 1.1 с реализацией Direct3D 10/11 поверх API Vulkan '},
{l:0,n:50470,t:'Новая криптографическая библиотека EverCrypt с математическим доказательством надёжности'},
{l:1,n:50471,t:'Доступен PulseJoin 2.2 для объединения записи с микрофона со звуком, выводимым на динамики'},
{l:2,n:50469,t:'Goldman Sachs намерен открыть код некоторых приложений для трейдеров'}
];


    
  var raw_nowtime=1554711773;











Профиль: Аноним (вход | регистрация)












НОВОСТИ (+)

КОНТЕНТ

WIKI

MAN'ы

ФОРУМ


Поиск (теги)




     



    .hdr_mobile {
	text-align: center; 
	display: none;
	margin: 0px;
	padding: 0px;
    }







[ новости /+++ | форум | wiki | теги
| 
]





















Новая криптографическая библиотека EverCrypt с математическим доказательством надёжности

06.04.2019 12:18




Исследователи из государственного института исследований в информатике и автоматике (INRIA), подразделения Microsoft Research и университета Карнеги — Меллона представили первый тестовый выпуск криптографической библиотеки EverCrypt, развиваемой в рамках проекта Everest и применяющей математические методы формальной верификации надёжности. По своим возможностям и производительности EverCrypt очень близка к существующим криптографическим библиотекам (OpenSSL), но в отличие от них предоставляет дополнительные гарантии надёжности и безопасности. 


Процесс верификации сводится к определению подробных спецификаций, описывающих все варианты поведения программы, и формированию математического доказательства, что написанный код полностью соответствует подготовленным спецификациям. В отличие от методов проверки качества на основе тестирования, верификация даёт надёжные гарантии, что программа будет выполняться только как задумали разработчики и в ней отсутствуют определённые классы ошибок. 


Например, соответствие спецификации гарантирует безопасную работу с памятью и отсутствие ошибок, приводящих к переполнению буфера, разыменованию указателей, обращению к уже освобождённым областям памяти или двойному освобождению блоков памяти. В  EverCrypt обеспечивается жёсткая проверка типов и значений - один компонент никогда не передаст другому компоненту параметры, не соответствующие спецификации и не получит доступ ко внутренним состояниям других компонентов.  Поведение при вводе/выводе полностью укладывается в действия простых математических функций, описание которых определено в криптографических стандартах. Для защиты от атак по сторонним каналам поведение при вычислениях (например, продолжительность выполнения или наличие обращений к определённой памяти) никак не зависит от характера обрабатываемых секретных данных.


Код проекта написан на функциональном языке F*, предоставляющем систему зависимых типов и уточнений, позволяющих задавать точные спецификации (математическую модель) для программ и гарантировать корректность и отсутствие ошибок в реализации при помощи SMT-формул и вспомогательных инструментов доказательства. На основании эталонного кода на языке F* затем генерируется код на ассемблере, Си, OCaml, JavaScript и Web Assembly.
Код на языке F* распространяется под лицензией Apache 2.0, а итоговые модули на Си  и ассемблере под лицензией MIT. Некоторые части подготовленного проектом кода уже используются в Firefox, ядре Windows, блокчейне Tezos и VPN Wireguard.



Отмечается, что верификация позволяет избавиться от многих ошибок, но не исключает всех проблем:

 Используемый при разработке инструментарий остаётся не верифицированным, в том числе возможно существование ошибок в F*, KreMLin (верифицирующий транслятор из языка F* в Си) и в компиляторах для сборки кода на Си (если не использовать верифицированный CompCert). 
 Очень трудно правильно и точно воспроизвести спецификации. Например, где-то можно допустить опечатку, а где-то упустить вопрос преобразование порядка следования байтов. Поэтому до того как приступать к созданию оптимизированных версий реализации проводится доскональный аудит и тестирование спецификаций;

 Применяемые модели верификации не учитывают такие угрозы, как атаки 
Spectre и Meltdown, а также не защищают от новых классов ещё не известных атак, которые могут появиться в будущем;


По сути EverCrypt объединяет два ранее разрозненных проекта HACL* и Vale, предоставляя на их основе унифицированный API и делая их пригодными для применения в реальных проектах.  HACL* написан на языке Low* и нацелен на предоставление криптопримитивов для использования в программах на языке Си с использованием API в стиле libsodium и NaCL. Проект Vale развивал предметно-ориентированный язык для создания верифицированных криптографических примитивов на ассемблере. Около 110 тысяч строк кода проекта HACL* на языке Low* и  25 тысяч строк кода на Vale объединены и переписаны в примерно 70 тысяч строк кода на универсальном языке F*, который также развивается в рамках проекта Everest. На базе созданных верифицированных примитивов проектом Everest дополнительно развивается стек miTLS с верифицированной реализацией TLSv1.3.


В первом выпуске библиотеки EverCrypt представлены верифицированные реализации следующих криптографических алгоритмов, которые предложены в вариантах на Си или ассемблере (при использовании библиотеки автоматически выбирается оптимальная для текущей платформы реализация):


 Алгоритмы хэшировния: все варианты SHA2, SHA3, SHA1 и MD5;
 Коды проверки подлинности: HMAC поверх SHA1, SHA2-256, SHA2-384 и SHA2-512 для аутентификации источника данных;
 Алгоритм формирования ключей HKDF (HMAC-based Extract-and-Expand Key Derivation Function);
 Потоковый шифр ChaCha20 (доступна неоптимизированная версия на Си) 
 Алгоритм аутентификации сообщений (MAC) Poly1305 (версии на Си и ассемблере), 
 Протокол Диффи-Хеллмана на эллиптических кривых Curve25519 (версии на Си и ассемблере с оптимизациями на базе инструкций BMI2 и ADX);
 AEAD режим блочного шифрования (аутентифицированное шифрование)  ChachaPoly (неоптимизированная версия на Си);
 AEAD режим блочного шифрования AES-GCM (версия на ассемблере с оптимизациями AES-NI).


В первом альфа-выпуске уже в основной массе завершена верификация кода, но ещё остаются некоторые неохваченные области. Пока не верифицированы и не включены в поставку оптимизированные при помощи инструкций SHA-EXT  и AVX варианты SHA2-256 и Poly130.   Обещанный уровень производительности в текущий момент обеспечен только для алгоритма Curve25519. 

Также ещё не стабилизирован API, который будет расширяться в следующих альфа-версиях (планируется унифицировать структуры для всех API по примеру наиболее зрелого EverCrypt_Hash.h и унифицировать коды ошибок в EverCrypt.Error). Из недоработок также отмечается поддержка только архитектуры x86_64 (на первом этапе главной целью является надёжность, а оптимизации и платформы будут реализованы во вторую очередь).












исправить  
+13 +/–





Главная ссылка к новости (https://news.ycombinator.com/i...)
OpenNews: Открыт код сверхнадёжного микроядра seL4
OpenNews: Агентство DARPA экспериментирует с созданием игр для верификации надёжности открытого ПО
OpenNews: Fabric - новый язык программирования для безопасных распределенных вычислений
OpenNews: Найден способ формального подтверждения 100% отсутствия ошибок в программе
OpenNews: Google представил криптографическую библиотеку Tink


Лицензия: CC-BY
Наводку на новость прислал birdie
Тип: Интересно / Программы
Ключевые слова: evercrypt, crypt, verify
При перепечатке указание ссылки на opennet.ru обязательно




Обсуждение (84)
Ajax/Линейный | Раскрыть все сообщения |  
RSS




 

1.1, Аноним (1), 12:22, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору] 
–3 +/–
Интересно, как математически доказать потокобезопасность.
 

 
2.2, адмирал третьего флота очевидно (?), 12:42, 06/04/2019 [^] [ответить]    [к модератору] 
–2 +/–
пока никак. увы.
 
2.23, Sw00p aka Jerom (?), 17:27, 06/04/2019 [^] [ответить]    [к модератору] 
+4 +/–
Дайте сначала определение "потокобезопасность"-и
 
2.47, Аноним (47), 21:55, 06/04/2019 [^] [ответить]    [к модератору] 
+2 +/–
Многопоточные алгоритмы невозможно описать математически?
 



1.3, nc (ok), 12:48, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору] 
+5 +/–
Какой еще Kremlin?
 

 
2.5, Анонимный селебрити (?), 12:54, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554537284,'Анонимный селебрити')
+2 +/–
Там только его рука :)
 
 
3.27, Аноним (27), 18:34, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554557689,'Аноним')
+1 +/–
Т. майор приложил свою лапу к созданию транслятора.
 




1.4, Анонимный селебрити (?), 12:53, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554537223,'Анонимный селебрити')
+5 +/–
Дейкстра одобряет
 



1.6, АНБ (?), 13:10, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554538208,'АНБ')
+2 +/–
> В первом альфа-выпуске уже в основной массе завершена верификация кода, но ещё 
> остаются некоторые не охваченные области. Пока не верифицированы и не включены 
> в поставку оптимизированные при помощи инструкций SHA-EXT  и AVX варианты 
> SHA2-256 и Poly130.   Обещанный уровень производительности в текущий момент 
> обеспечен только для алгоритма Curve25519. Также ещё не стабилизирован API, который 
> будет расширяться в следующих альфа-версиях (планируется унифицировать структуры для 
> всех API по примеру наиболее зрелого EverCrypt_Hash.h и унифицировать коды ошибок 
> в EverCrypt.Error). Из недоработок также отмечается поддержка только архитектуры x86_64 
> (на первом этапе главной целью является надёжность, а оптимизации и платформы 
> будут реализованы во вторую очередь).
На фоне быстрого и проверенного годами OpenSSL выглядит бледно.
К тому же, яйцеголовые теоретики сами пишут, что верификация не защищает на самом деле ни от чего, просто делет код медленее, как и проверки времени выполнения. 
В общем, вердикт - чисто академическая поделка и не стоит внимания. Лучше оставаться на старом, добром и вполне надежном (если руки не из джопы) OpenSSL!
 

 
2.7, Аноним (7), 13:26, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554539218,'Аноним')+/–Да, во многом так  Не первая причем  Такое хорошо для верификации практически не... весь текст скрыт [показать] 
2.9, пох (?), 13:37, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554539858,'пох')
+8 +/–
> На фоне быстрого и проверенного годами OpenSSL
лол.
 
 
3.34, myhand (ok), 19:12, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554559971,'myhand')
+2 +/–
АНБ проверило.  А ты хто такой?
 
 
4.41, пох (?), 20:52, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554565971,'пох')
+1 +/–
у ентого вашего "АНБ" чекистский значок, кажись, на лацкане...
 
 
5.48, myhand (ok), 22:21, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554571302,'myhand')
+/–
А вы каких фашистов выбираете?
 



2.18, Аноним (18), 15:13, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554545635,'Аноним')
+/–
Libressl лучше
 
 
3.73, dabdabya (?), 15:27, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554632858,'dabdabya')
–1 +/–
Кто-то минус влепил,но он действительно лучше. Libressl не требует perl для сборки и при сборке с -O3 быстрее того же openssl,который тоже собран с -O3
 

2.35, ФАПСИ (?), 19:16, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554560197,'ФАПСИ')
+2 +/–
Абсолютно с вами согласен, коллега!
 



1.8, Аноним (8), 13:37, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554539856,'Аноним')
–2 +/–
Математическое доказательство - это ещё один инструмент обмана майкрософтом наивных обывателей, убеждающий их, что закрытая библиотека даст действительно надёжную защиту их данным.
 

 
2.10, A.Stahl (ok), 13:51, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554540669,'A.Stahl')
+1 +/–
>>закрытая библиотека
>под лицензией Apache 2.0
A?
 
 
3.28, Аноним (27), 18:38, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554557911,'Аноним')
+/–
В Венде она будет лежать уже в бинарном виде. Так что проведённые доказательства над исходниками здесь до фонаря.
 
 
4.29, Аноним (27), 18:40, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554558024,'Аноним')
+1 +/–
MS сделает свой транслятор из F* в C, автоматически вставляющий код телеметрии.
 
 
5.39, Аноним84701 (ok), 19:48, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554562120,'Аноним84701')+/–Ну вообще-то верификация корректности работы телеметрии тоже нужна  А то вдруг д... весь текст скрыт [показать] 

4.89, Аноним (89), 22:21, 07/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554657663,'Аноним')+/–Да не будет она нигде лежать  M  Research регулярно выпускает какие-нибудь чисто... весь текст скрыт [показать] 


2.33, myhand (ok), 19:10, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554559832,'myhand')+3 +/–Куды там   Аксиома выбора - так и вовсе происки ЦРУ, а может даже Госдепу  Надо ... весь текст скрыт [показать] 
 
3.36, Отец Онуфрий (?), 19:26, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554560798,'Отец Онуфрий')
+2 +/–
Однако, оглобля — отличное оружие, опаснее огнемета.
 
 
4.78, Мишаня_тупой_ватник (?), 17:30, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554640256,'Мишаня_тупой_ватник')
+/–
Истинно верующему человеку для жизни достаточно деревянного таалета, пары валенок, балалайки и флакона чего-то горючего. Да и то избыточно ибо праведнику главное чаще возноситься в молитвах!
 





1.11, X4asd (ok), 14:06, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554541595,'X4asd')
+/–
> Код на языке F* распространяется под лицензией Apache 2.0, а итоговые модули на Си и ассемблере под лицензией MIT
как это понять?
исходный код на Apache2, но его скомпилированный вариант уже на MIT? а исходный код скомпилированного варианта тогда под какой лицензией -- MIT или Apache2?
 

 
2.14, пох (?), 14:25, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554542734,'пох')–1 +/–авторы как хотят, так и лицензируют  Почему-то для кода на F им захотелось более... весь текст скрыт [показать] 
 
3.21, Аноним (21), 15:42, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554547375,'Аноним')+/–Читаем внимательно О скопмилированном коде тут речь не идет  Поэтому не путайте ... весь текст скрыт [показать] 
 
4.26, пох (?), 17:52, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554555177,'пох')+/–о, очередной  программист  самоучка  Компилятор с F на C - вполне себе компилято... весь текст скрыт [показать] 
 
5.30, Аноним (27), 18:53, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554558784,'Аноним')+/–https   ru wikipedia org wiki Лицензия_Apache  Согласно Free Software Foundation... весь текст скрыт [показать] 
 
6.51, пох (?), 23:17, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554574650,'пох')
+/–
> Так что можешь хоть под GPL прелицензировать, то, что сам странслировал с 
> F*.
не можешь. Ибо ты - не разработчик и не владелец авторского права ни на исходник, ни на странслированное, сюрпрайз.
А разработчики могут перевести хоть под коммерческую лицензию, как уже не раз случалось. Или, вот, вовсе под MIT. Поскольку, внезапно, их может совершенно не беспокоить "останутся ли свободными" форки их проекта.
 

5.31, Sw00p aka Jerom (?), 18:58, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554559126,'Sw00p aka Jerom')–1 +/–речь идет именно о сгенерированном Си коде, никакой компиляции https   github co... весь текст скрыт [показать] 
 
6.40, Аноним (40), 20:33, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554564806,'Аноним')+/–Автоматическая генерация кода на одном языке из исходников на другом с потерей ч... весь текст скрыт [показать] 
 
7.45, Sw00p aka Jerom (?), 21:12, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554567136,'Sw00p aka Jerom')–3 +/–     пройдите по ссылке указанной выше, и вовсе не компиляция, а трансляция  код... весь текст скрыт [показать] 
 
8.49, пох (?), 22:50, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554573026,'пох')
+/–
> пс: цитата из вики, для особо одаренных 
вашу викивракию пишут такие же "эксперты" как и вы - не посещавшие даже лекции для первокурсников про теорию компиляторов. Так, что-то слышавшие краем уха.
> "Компили́ровать — проводить трансляцию машинной программы с предметно-ориентированного 
> языка на машинно-ориентированный язык" 
во бред-то
> и с коих пор Си - машинно-ориентированный?
с каких пор он "предметно-ориентированный" - тоже забавный вопрос.
Это, видимо, из какой-то книжки про Алгол (или про кобол) списано, не вдаваясь в подробности в каком году и какими специалистами она написана.

 
 
9.57, Sw00p aka Jerom (?), 00:35, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554579326,'Sw00p aka Jerom')
+1 +/–
>не посещавшие даже лекции для первокурсников про теорию компиляторов.
ок, понятно, а теперь ответьте на один вопрос - кто автор "теории компиляторов"? ответите и дальше продолжим дискуссию.
>не вдаваясь в подробности в каком году и какими специалистами она написана.
ну вот отлично, жду ответа на свой вопрос.
пс: как называется процесс "текст на русском" -> "текст на английском" ?
вот коту моему все равно с какого на какой язык транслировали, ему нужно в итоге транслировать в "кыскыскыс", "мяумяу", "ахтыскотина", "брысьотсюда". Моему желудку все равно каков рецепт и какую душу вложил кулинар, ему важней объем белков, жиров и углеводов.
 
9.58, Sw00p aka Jerom (?), 00:37, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554579432,'Sw00p aka Jerom')
+/–
про первокурсников, а вы собственно из серии программистов которым "не нужна математика"? 
 
9.68, t_ (?), 12:53, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554623597,'t_')
+/–
Самое забавное, что он прав и в вики это тоже верно написано.
Перечитайте что ли вводную главу книги драконов.
Кричать про экспертов и, при этом, не отличать компилятор от транслятора - гиблое дело.
 
 
10.75, Аноним84701 (ok), 16:46, 07/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554637591,'Аноним84701')+/–Девочки, не ссорьтесь  Cуществует  и то и это    Остроконечники W различающие  п... весь текст скрыт [показать] 
 
11.81, Sw00p aka Jerom (?), 18:58, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554645498,'Sw00p aka Jerom')
+/–
>Т.е. компилятор тут - частный случай/разновидность транслятора.
Да, но именно результат "компиляции" (это типа последняя фаза трансляций) может спокойно исполняться на конечной машине, даже "Ассемблер" транслируя ассемблерный код в "нули и единицы", которые могут спокойно исполниться машиной, совершает процесс "компиляции" (то есть привести к виду "исполняемого" на конкретной машине).
 
 
12.83, Аноним84701 (ok), 19:41, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554648104,'Аноним84701')
+/–
>>Т.е. компилятор тут - частный случай/разновидность транслятора.
> Да, но именно результат "компиляции" (это типа последняя фаза трансляций) может спокойно 
> исполняться на конечной машине,
Может, а может и нет. Я просто подсказываю, что зависит от используемой (вполне общепринятой) терминологии с использованием более общего понятие "compiler" (т.е. включая переводчик). 
Я вообще не собираюсь спорить о том, чья классификация (не)правильная. Просто (по факту) есть и та и другая, используется специалистами и по моему глупо игнорировать или делать вид, что  "правильно только наше понимание и наша терминология!".
> даже "Ассемблер" транслируя ассемблерный код в "нули  и единицы", которые могут спокойно исполниться машиной, совершает процесс "компиляции" 
Э-э-э не-не, ассемблер как раз обычно вне таких классификаций и стоит особняком. 
Если брать ту же Книгу Драконов, то assembly там одна из возможных конечных целей компилятора. 
Хотя сам процесс превращения современного assembly-кода c его тучей макросов, структур и довольно сложными вычислениями "времени ассемблеризации"  и прочим, вполне тянет на "полноценную" компиляцию.
В общем, "все сложно".

Правда, я не припоминаю ни одной "накладки" или путанницы из-за этого на практике, потому что если различие важно из-за нюансов, то это упомянут и подчеркнут отдельно, а если пишуший не в курсе, то это обычно не единственная проблема в статье-артикле :)
 
 
13.86, Sw00p aka Jerom (?), 20:25, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554650709,'Sw00p aka Jerom')
+/–
>Э-э-э не-не, ассемблер как раз обычно вне таких классификаций и стоит особняком.
нет не стоит, и он от ЯП других ничем не отличается, ибо он из мнемонического кода транслирует в коды операций процессора. И я именно эту стадию считаю как понятие "компиляции", в других случаях это все трансляция (перевод).
тип такого:
англ ->(тут перевод в) рус ->(тут перевод в) нем ->(тут компиляция) кошачий. :)
>Если брать ту же Книгу Драконов, то assembly там одна из возможных конечных целей компилятора.
что есть конечная цель? представить код "понятный" процессору (машине).
>Хотя сам процесс превращения современного assembly-кода c его тучей макросов, структур и довольно сложными вычислениями "времени ассемблеризации"  и прочим, вполне тянет на "полноценную" компиляцию.
ну да так и есть, и в результате получаем исполняемый код.
>Правда, я не припоминаю ни одной "накладки" или путанницы из-за этого на практике
так проблема в строгом определении любого понятия, ибо если его нет, то все ведет к таким дискуссиям (холиварам). Можем еще и похоливарить на тему JIT компиляции.
 
 
14.87, Аноним84701 (ok), 20:51, 07/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554652261,'Аноним84701')+/–То что не отличается, я даже не спорил, а вот то что все же стоИт, пусть в основ... весь текст скрыт [показать] 
 
15.88, Sw00p aka Jerom (?), 21:28, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554654484,'Sw00p aka Jerom')
+/–
>Конечная цель - в смысле результата работы самого компилятора: в оригинале "compiler target".
Так результат работы того же gcc с опцией -c (Compile or assemble) на выходе даёт "The ultimate output is in the form of an object file for each source file.", обратим внимание на "object file", что это? это разве промежуточный код?
открываем википедию и читаем
"Объектные файлы представляют собой блоки машинного кода и данных с неопределенными адресами ссылок на данные и процедуры в других объектных модулях, а также список своих процедур и данных."
А компоновщик уже тупо свяжет их, и создаст полноценный исполняемый файл.
Так, что же в итоге такое процесс компиляции, как не трансляция в машинные коды операций.

>Ну и не припоминается ни одного современного компилятора, генерирующего сразу машинный код.
Go-lang - не? "сразу машинный код" может сгенерить только очень близкий к машинному ЯП, то есть "Ассемблер как ЯП"
>как и в clang, других компиляторов чтобы проверить, у меня сейчас нет 
если брать llvm, то clang транслирует в биткод llvm (промежуточный), и собственно ассемблер llvm готовит машинный.
 







8.60, Аноним (60), 07:06, 07/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554602787,'Аноним')+/–Вообще-то  Вики  сама суть результат компиляции  com-pile дословно  в одну кучу ... весь текст скрыт [показать] 
8.79, Аноним84701 (ok), 17:35, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554640524,'Аноним84701')
+/–
> )))) пройдите по ссылке указанной выше, и вовсе не компиляция, а трансляция (кодогенерация) 
Выше по ссылке
https://github.com/project-everest/hacl-star
> All our code is written and verified in F* and then compiled to C via the KreMLin tool.
Еще используется "extraction"
> HACL* relies on F* (stable branch) and KreMLin (stable branch) for verification, extraction to OCaml (specs/) and extraction to C (code/).
https://github.com/FStarLang/kremlin/
> KreMLin is a tool that extracts an F* program to readable C code.
> This work has been formalized on paper. We state that the compilation of such F* programs to C preserves semantics. We start from Low*, a subset of F*, and relate its semantics to CompCert's Clight.
Очевидно, что авторы не пользуются терминологией с явно выраженным различием между "translation" и "compilation", поэтому прискипывание к конечной формулировке (тем более, после перевода) вряд ли что-то даст в конечном результате (т.е. вне опеннета).
 

7.50, пох (?), 23:07, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554574045,'пох')
+/–
> Автоматическая генерация кода на одном языке из исходников на другом с потерей 
> человекочитаемости 
вы только в википедию этот бред теперь не пишите вместо того, который там уже, пожалуйста.
код там вполне человекочитаем - читавшие вон даже решили что куда более, чем код, наляпанный человеками, образующий нынешнюю линуксную crypto library. Он просто не человеком написан.
В общем-то, и выхлоп gcc -S тоже вполне человекочитаем, а что там нечеловеческая фигня написана - так она в общем-то и в исполняемом коде такая же и остается ;-)
Видимо, gcc по мнению адептов викивракии тоже "не компилятор".
> называется компиляцией. Выходной язык не обязан быть машинным кодом. 
а последняя фраза верная. Собственно, вон есть такой прекрасный llvm - производит он нечто примерно такое: http://llvm.org/docs/LangRef.html#module-structure - никакая "машина" (в том смысле, в котором поняли бы современники термина "машинный код") ЭТО не исполняет, ни в текстовой форме, ни в какой либо другой. (человекочитаемым, на мой взгляд, это тоже не является, но это кому как. Лично я уж лучше выхлоп gcc -S читать буду)
 
 
8.66, myhand (ok), 11:11, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554617466,'myhand')
+2 +/–
> вы только в википедию этот бред теперь не пишите вместо того
Почему-ж?  В помойку надо складать мусор, она для того и предназначена.
 


6.42, пох (?), 20:54, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554566065,'пох')
+/–
перепись безграмотных "программистов" на опеннете...
 
 
7.46, Sw00p aka Jerom (?), 21:13, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554567195,'Sw00p aka Jerom')
–1 +/–
отмазки одни, давай по делу
 





2.19, KonstantinB (ok), 15:22, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554546141,'KonstantinB')+1 +/–Полагаю, так сделано потому, что Apache 2 0 требует явного указания на то, какие... весь текст скрыт [показать] 
 
3.37, X4asd (ok), 19:38, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554561501,'X4asd')+/–а кому пришло бы в глову модифицировать НЕ исходный код а получившийся скомпилир... весь текст скрыт [показать] 
 
4.43, пох (?), 20:58, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554566336,'пох')
–1 +/–
> а кому пришло бы в глову модифицировать НЕ исходный код
например, вот Мозилле - пришло.
Не всегда получается чужой исходник вот так, не модифицируя, встроить в свою сложную (и мутную) библиотеку.  Что там у wireguard не смотрел, в виду его феерической ненужности, но, если считать изменения ради форматирования и сответствию дереву проекта - наверняка меняли.
до Эвереста (в смысле до верифицированной целиком замены openssl) - покамест как до китая раком, да и не зря они такое название выбрали - вряд ли вершина будет достигнута в обозримом будущем, а чтобы использовать части - их надо, как минимум, выковырять - уже изменение.
 
 
5.55, KonstantinB (ok), 00:18, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554578299,'KonstantinB')
+/–
> Что там у wireguard не смотрел, в виду его феерической ненужности
Как говорили в одной древней любительской сети, "отучаемся говорить за всех".
> наверняка меняли
Менял сам автор так, как его попросили.
> до верифицированной целиком замены openssl) - покамест как до китая раком
Ясен пень. Openssl пишется уже 20 с гаком лет. Но инициативу поддерживаю.
 

4.56, KonstantinB (ok), 00:20, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554578416,'KonstantinB')
+/–
> а кому пришло бы в глову модифицировать НЕ исходный код а получившийся скомпилированный вариант?
В общем-то по MIT это делать как раз можно (беря их скомпилированные варианты).
Суть такого лицензирования в том, чтобы заявить:
1) берите скомпиенное у нас, у нас все формально верифицировано, а у Васяна там хрен знает что,
2) если уж беретесь править доказательства, то четко указывайте, где что поменяли, чтобы мы могли проверить корректность.
 




 ....нить скрыта, показать (29)vis_invert_msg(0,6,0);

1.15, кругомвраги (?), 14:46, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554543993,'кругомвраги')
–3 +/–
>Процесс верификации сводится к определению подробных спецификаций...
посмотрим на это с другой стороны
там где есть одна спецификация может быть и другая,неразглашаемая.
 

 
2.32, Sw00p aka Jerom (?), 19:03, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554559436,'Sw00p aka Jerom')
+/–
в смысле неразглашаемая?
 
 
3.61, Аноним (60), 07:21, 07/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554603683,'Аноним')+/–У  Кругомвраги  известный из истории смысл  Einkreisung - Идеология, овладевшая ... весь текст скрыт [показать] 




1.16, . (?), 15:05, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554545101,'.')
+/–
> гарантирует безопасную работу с памятью и отсутствие ошибок, приводящих к переполнению буфера, разыменованию указателей, обращению к уже освобождённым областям памяти или двойному освобождению блоков памяти
Все эти ошибки возникают при динамической работе с памятью или при зависимости логики от внешних данных. Крипту ничто не мешает писать на массивах, выходы за границы которых отлавливаются статическим анализатором. Тогда, если тесты успешны программа иначе себя вести не может.
Пример:
void encrypt(uint64_t block[4], uint64_t rk[120]);
С другой стороны в библиотеках обычно дают на выбор несколько алгоритмов, каждый из который имеет варианты реализации в зависимости платформы (endianness, разрядность, аппаратное ускорение, особенности ОС). Поэтому подход с формальной верификацией имеет смысл, но это компромисс который обычного пользователя в общем-то не касается.
Вот шифр чача на мой взгляд слишком активно сейчас проталкивают. Он конечно быстрее и в чем-то лучше аес, но сдается, что его уже могут скажем так анализировать.
 

 
2.17, Аноним (17), 15:11, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554545500,'Аноним')
+/–
Напишите на массивах хотя бы парсер сертификатов X.509, а мы посмотрим.
 
 
3.20, . (?), 15:36, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554546964,'.')–1 +/–В сабжевой библиотеке этого тоже нет  Сам я со структурой сертификатов не разбир... весь текст скрыт [показать] 

2.38, Ivan_83 (ok), 19:42, 06/04/2019 [^] [ответить]     [к модератору]  s_n_a(1554561772,'Ivan_83')+/–1  При такой передаче много лишнего копирования памяти  2  Тут не предусмотрен в... весь текст скрыт [показать] 
 
3.53, . (?), 23:46, 06/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554576418,'.')
+/–
> Поскольку другой поточный шифр RC4, которые уже везде обьявили дырявым, то кроме чачи/сальсы ничего и нет.
Согласен. Но все же создалось некоторое впечатление, что сместить пытаются не rc4, а именно aes. 
В чем может быть подвох сальса-подобных шифров, при условии что от классического анализа они защищены? Операция сложения используется, как единственный источник нелинейности. При этом само сложение обладает рядом свойств, которые гипотетически могут облегчить анализ. 
> При такой передаче много лишнего копирования памяти.
> Тут не предусмотрен возврат данных.
Одномерный массив в си всегда передается как указатель:
void encrypt(uint64_t block[4], const uint64_t rk[120]); 
void encrypt(uint64_t *block, const uint64_t *rk);
Для компилятора нет разницы. Поэтому, чтобы гарантированно не облажаться с выходом за границы понадобится еще статический анализатор.
Нужна ли формальная верификация библиотекам для массового использования? Да.
Нужна ли она в принципе для написания крипты? Нет, так как криптография в софте легко разбивается на функции, изменяющие массив (или структуру) фиксированного размера.
Вот что я пытался сформулировать.
 
 
4.59, Sw00p aka Jerom (?), 02:32, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554586338,'Sw00p aka Jerom')
+/–
>Нет, так как криптография в софте легко разбивается на функции, изменяющие массив (или структуру) фиксированного размера. 
простите, а функции с данными (структурами данных) не работают? как это массив (последовательность), называйте как хотите, можно представить в виде функции без аргумента?

 
4.72, Sw00p aka Jerom (?), 14:57, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554631044,'Sw00p aka Jerom')
+/–
>Операция сложения используется, как единственный источник нелинейности.
нет, нелинейность в шифрах задают так называемые "бент-функции", в том же aes это его S-Box
 
 
5.74, . (?), 16:18, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554635885,'.')
+/–
Chacha и подобные шифры используют три операции: сложение, xor и побитовый сдвиг. Сложение здесь единственная нелинейная операция. В целом это все дает хорошую защиту от классических методов криптоанализа, основанных на статистике. Но у сложения есть ряд интересных свойств, которые как мне кажется позволяют полностью вскрыть шифры данной конструкции. Естественно, эти свойства сейчас исследуются профессиональными криптографами и в случае обнаружения способа его скорее всего опубликуют. 
Aes кстати тоже содержит не самый лучший s-box из всех возможных. Алгебраический иммунитет 2, хотя можно почти при той же нелинейности 3. Здесь подробнее:
https://mailarchive.ietf.org/arch/msg/cfrg/iGeC0IO9K0AGS_AvUHcOLMfd8Dk
Bent-функции (максимально нелинейные) это математическая модель, в чистом виде редко применяются.
 
 
6.80, Sw00p aka Jerom (?), 18:18, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554643136,'Sw00p aka Jerom')
+/–
>Но у сложения есть ряд интересных свойств, которые как мне кажется позволяют полностью вскрыть шифры данной конструкции.
не у сложения (по модулю), а от выбора S-Box
 
 
7.82, . (?), 19:03, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554645797,'.')
+/–
Оригинальная чача, s-box'ов там нет.
https://github.com/odzhan/tinycrypt/blob/master/stream/chacha/ref/chacha.c
 
 
8.84, Sw00p aka Jerom (?), 20:00, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554649216,'Sw00p aka Jerom')
+/–
ChaCha State это и есть фактический S-box
 
8.85, Sw00p aka Jerom (?), 20:07, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554649620,'Sw00p aka Jerom')
+/–
добавлю, почему тогда эти начальные стейты в сальсе были одни, а в чачача ДЖБ их изменил? 
 
 
9.91, Ivan_83 (ok), 00:21, 08/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554664905,'Ivan_83')
+/–
> добавлю, почему тогда эти начальные стейты в сальсе были одни, а в 
> чачача ДЖБ их изменил?
Напиши ему и спроси.
 





4.90, Ivan_83 (ok), 00:20, 08/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554664842,'Ivan_83')
+/–
> Согласен. Но все же создалось некоторое впечатление, что сместить пытаются не rc4, 
> а именно aes.
Чача вроде как быстрее AES если не использовать aes-ni.
> В чем может быть подвох сальса-подобных шифров, при условии что от классического 
> анализа они защищены? Операция сложения используется, как единственный источник нелинейности. 
> При этом само сложение обладает рядом свойств, которые гипотетически могут облегчить 
> анализ.
Я не криптоаналитик, единственный подвох который я знаю - потоковые шрифты далеко не всегда можно применять в различных конструкциях вместо блочных.
Например в полнодисковом шифровании по схеме XTS можно только блочный, потому что поточный там из за xor в самой XTS даёт совсем не тот результат который ожидаешь :)
 

3.62, Аноним (60), 07:24, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554603853,'Аноним')
+/–
> 1. При такой передаче много лишнего копирования памяти.
Справедливо для C, но не для C++.
 
 
4.63, Аноним (60), 07:50, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554605452,'Аноним')
+/–
>> 1. При такой передаче много лишнего копирования памяти.
> Справедливо для C
Тут я ошибся.
 





1.22, Аноним (22), 16:25, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554549933,'Аноним')
+1 +/–
>доказательства надежности
>KreMLin
Так толсто, что аж тонко. 
 



1.25, Аноним (25), 17:32, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554553944,'Аноним')
+/–
>KreMLin
Так вот случаем защита машин подсчёта голосов в США была реализована не на этой библиотеке?
 

 
2.69, Анонимс (?), 14:38, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554629925,'Анонимс')
+/–
На этой, на этой. А так, как она в открытых исходниках, значит, скоро её соберут мантейнеры и включат во все дистрибутивы мира. Ну, вы теперь понимаете, кто самый могущественный в мире и кто может свергать и назначать президентов в любой стране.
 



1.44, Аноним (-), 21:06, 06/04/2019  [ответить] [показать ветку] [···]     [к модератору]  s_n_a(1554566793,'Аноним')+1 +/–А как же Rust, как же без него     128546 ... весь текст скрыт [показать] 



1.52, Главный Анализатор (?), 23:33, 06/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554575593,'Главный Анализатор')
+/–
Я разработал свою систему шифрования, которую не возможно дешифровать. Даже самые мощные вычислительные центры не в силах раскусить мой алгоритм.
 

 
2.64, Главный Анализатор (?), 10:45, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554615955,'Главный Анализатор')
+/–
А ещё я клоун и это была моя сливная шутка.
 
2.65, Аноним (25), 11:06, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554617217,'Аноним')
+/–
А 1 нагревательный прибор способен?
 
 
3.67, Главный Анализатор (?), 11:18, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554617929,'Главный Анализатор')
+/–
Что за чушь ты несешь?
 




1.54, анонас (?), 00:01, 07/04/2019  [ответить] [показать ветку] [···]    [к модератору]  s_n_a(1554577265,'анонас')
+/–
Так я не понял, а Rust где?
 

 
2.70, Анонимс (?), 14:41, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554630060,'Анонимс')
+/–
Так, как rust ещё молодой язык, то ещсложно 
 
 
3.71, Анонимс (?), 14:46, 07/04/2019 [^] [ответить]    [к модератору]  s_n_a(1554630395,'Анонимс')
+/–
сложно найти высококвалифицированных специалистов, особенно по криптографии.
 





var hidden_msg = new Array(0,7,39,89,33,14,21,26,30,31,40,45,75,87,60,19,37,61,20,38,44); 
var hidden_idx = new Array(0,1,1,1,1,2,5,17,18,20,20,20,21,21,21); 
if (text_type == 1){ open_block(117047,3,hidden_msg,1);}




 Добавить комментарий











Имя:
E-Mail:
Заголовок:
Текст:






setup_nick();



load_topnews(1);












    var re = new RegExp('Android|Mobile|Opera Mini','');
    if (navigator.userAgent && re.exec(navigator.userAgent) == null){
	(adsbygoogle = window.adsbygoogle || []).push({});
    }




Навигация




     
Фильтры
    События
    Обзоры и статьи
    Программы
    Уязвимости
    Исключить Linux
    Исключить BSD
    ----- Формат вывода
    10 полных
    20 сокращенных
    40 заголовков
    


 Каналы:      
 Разделы новостей | Сводные
 Что нового на OpenNet
 Поиск в новостях
 Новые комментарии
 Добавить свою новость




Памятные даты


8 апреля RFC исполнилось 50 лет


load_topnews(2);


Важное


- 06.04 Новая криптографическая библиотека EverCrypt с математическим доказательством надёжности (86 +14)
- 04.04 Sisvel формирует патентный пул для сбора отчислений за использование кодеков AV1 и VP9 (169 –44)
- 28.03 Mozilla развивает WASI для использования WebAssembly вне браузера (114 +10)
- 13.03 Выпуск пользовательского окружения GNOME 3.32 (242 +27)
- 06.03 SPOILER - новая атака на механизм спекулятивного выполнения CPU Intel (199 +44)



Советы


- 03.04 Объединение томов через aufs для отказоустойчивости и моментального восстановления 
- 31.03 vmhgfs в старых CentOS и RHEL
- 30.03 Связывание повторяемых сборок GNU Guix с архивом исходных текстов  Software Heritage
- 14.03 Использование slackpkg для chroot
- 03.03 Как сделать пометку ошибок правописания в Firefox более заметной



Обсуждаемые новости


- 11:19 Новая версия музыкального проигрывателя DeaDBeeF 1.8.0  (47)
- 11:18 Сообщество Blender выпустило свободный анимационный фильм Sp (83)
- 11:06 В рамках проекта HermiTux развивается unikernel, бинарно сов (72)
- 10:58 В Wine Staging добавлены патчи для повышения производительно (14)
- 10:34 В Ruby-библитеке bootstrap-sass выявлен бэкдор (32)
- 10:32 Выпуск проекта DXVK 1.1 с реализацией Direct3D 10/11 поверх  (27)
- 10:02 Дерек Форман ушёл поста ответственного за выпуск релизов Way (65)
- 09:59 Релиз дистрибутива для исследования безопасности систем Kali (26)
























  Закладки на сайте
  Проследить за страницей



Created 1996-2019 by Maxim Chirkov  
Добавить, Поддержать, Вебмастеру, ГИД  











  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-123449-1', 'auto');
    ga('send', 'pageview');





